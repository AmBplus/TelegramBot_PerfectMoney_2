// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PefectMoney.Data.DataBase;

#nullable disable

namespace PefectMoney.Data.Migrations
{
    [DbContext(typeof(TelContext))]
    [Migration("20230707170504_ACTIVE")]
    partial class ACTIVE
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PefectMoney.Core.Model.BankCardEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CartNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.OrderEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("BotChatId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Dollar")
                        .HasColumnType("double");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rial")
                        .HasColumnType("int");

                    b.Property<double>("TotalDollarPrice")
                        .HasColumnType("double");

                    b.Property<double>("TotalRialsPrice")
                        .HasColumnType("double");

                    b.Property<long>("VoicherCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("trackId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.ProductEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProductEntity");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "VoicherCode"
                        });
                });

            modelBuilder.Entity("PefectMoney.Core.Model.RoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RoleModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 7, 7, 20, 35, 3, 804, DateTimeKind.Local).AddTicks(7598),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 7, 7, 20, 35, 3, 804, DateTimeKind.Local).AddTicks(7628),
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("PefectMoney.Core.Model.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("BotChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserNameTelegram")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            BotChatId = 0L,
                            CreationDate = new DateTime(2023, 7, 7, 20, 35, 3, 804, DateTimeKind.Local).AddTicks(9940),
                            PhoneNumber = "+989308505480",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("PefectMoney.Core.Model.VoicherCodeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserBotChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("VoicherCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("VoicherCodes");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.BankCardEntity", b =>
                {
                    b.HasOne("PefectMoney.Core.Model.UserEntity", "User")
                        .WithMany("BankAccountNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.OrderEntity", b =>
                {
                    b.HasOne("PefectMoney.Core.Model.ProductEntity", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.UserEntity", b =>
                {
                    b.HasOne("PefectMoney.Core.Model.RoleModel", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.VoicherCodeEntity", b =>
                {
                    b.HasOne("PefectMoney.Core.Model.OrderEntity", "Order")
                        .WithOne("VoicherCode")
                        .HasForeignKey("PefectMoney.Core.Model.VoicherCodeEntity", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.OrderEntity", b =>
                {
                    b.Navigation("VoicherCode")
                        .IsRequired();
                });

            modelBuilder.Entity("PefectMoney.Core.Model.ProductEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.RoleModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PefectMoney.Core.Model.UserEntity", b =>
                {
                    b.Navigation("BankAccountNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
